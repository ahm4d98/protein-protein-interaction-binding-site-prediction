is.integer(x)
x<-sqrt(4L)
#x<-4L
class(x)
is.integer(x)
var1<-32
var1<-as.character(32)
var1
class(var1)
var3<-complex(real=2,imaginary = 4)
var3
gender<-factor(c("Male","male"))
levels(gender)
table(gender)
e
levels(gender)
table(gender)
gender<-factor(c("Male","Male","female","female"))
levels(gender)
table(gender)
str(iris)
class(iris)
dim(iris)
x<-iris
x
nrow(x)
ncol(iris)
names(x)
x$Sepal.Length
x$Sepal.Length[5]
x$Sepal.Length[10]
x["Sepal.Lenght"][10]
x[,"Sepal.Lenght"][10]
x[,"Sepal.Lenght"]
iris[,"Sepal.Lenght"]
iris[,"Sepal.Length"]
iris[,"Sepal.Length"][10]
iris["Sepal.Length"][10]
iris[,"Sepal.Length"][10]
summary(iris)
summary(iris[,"Sepal.Length"][10]
)
summary(iris[,"Sepal.Length"][10])
x<-list(x=1,y="a",z=c(1,2,3))
x
x$z[1]
x<-list(x=1,y="a",z=c(11,2,3))
x$z[1]
knitr::opts_chunk$set(echo = TRUE, comment = "")
classes <- c("integer","character","factor", "factor", "numeric", "numeric", "numeric", "numeric")
csvForbes2000 <-read.table("Forbes2000.csv/Forbes2000.csv",
header = TRUE, sep = ","
, row.names = 1)
setwd("~/")
library(readr)
Forbes2000 <- read_csv("Forbes2000.csv/Forbes2000.csv")
Forbes2000 <- read_csv("Forbes2000.csv/Forbes2000.csv",header=TRUE,colClasses=classes)
Forbes2000 <- read_csv("Forbes2000.csv/Forbes2000.csv",header=TRUE,row.names=1,colClasses=classes)
Forbes2000 <- read_csv("Forbes2000.csv/Forbes2000.csv",sep=",",header=TRUE,row.names=1,colClasses=classes)
classes <- c("integer","character","factor", "factor", "numeric", "numeric", "numeric", "numeric")
csvForbes2000 <-read.table("Forbes2000.csv/Forbes2000.csv", header = TRUE, sep = ","
, row.names = 1, colClasses =classes)
classes <- c("integer","character","factor", "factor", "numeric", "numeric", "numeric", "numeric")
Forbes2000 <- read_csv("Forbes2000.csv/Forbes2000.csv",sep=",",header=TRUE,row.names=1,colClasses=classes)
Forbes2000 <- read_csv("Forbes2000.csv/Forbes2000.csv",header=TRUE,sep=",",row.names=1,colClasses=classes)
Forbes2000 <- read.table("Forbes2000.csv/Forbes2000.csv",header=TRUE,sep=",",row.names=1,colClasses=classes)
Forbes2000 <- read_csv("Forbes2000.csv/Forbes2000.csv",header=TRUE,sep=",",row.names=1,colClasses=classes)
Forbes2000 <- re("Forbes2000.csv/Forbes2000.csv",header=TRUE,sep=",",row.names=1,colClasses=classes)
Forbes2000 <- read.table("Forbes2000.csv/Forbes2000.csv",header=TRUE,sep=",",row.names=1,colClasses=classes)
Forbes2000
r save(csvForbes2000, file = "Forbes2000.rda")
save(csvForbes2000, file = "Forbes2000.rda")
load("~/Forbes2000.rda")
load("~/Forbes2000.rda")
rdaObj<-load("Forbes2000.rda")
rdaObj
classes <- c("integer","character","factor", "factor", "numeric", "numeric", "numeric", "numeric")
Forbes2000
Forbes2000 <- read.table("Forbes2000.csv/Forbes2000.csv",header=TRUE,sep=",",row.names=1,colClasses=classes)
Forbes2000
save(csvForbes2000, file = "Forbes2000.rda")
save(Forbes2000, file = "Forbes2000.rda")
rdaObj<-load("Forbes2000.rda")
rdaObj
rm Forbes2000
rm (Forbes2000)
rdaObj
head(Forbes2000)
Forbes2000 <- read.table("Forbes2000.csv/Forbes2000.csv",header=TRUE,sep=",",row.names=1,colClasses=classes)
na_profits <- is.na(csvForbes2000$profits)
table(na_profits)
csvForbes2000 <- read.table("Forbes2000.csv/Forbes2000.csv",header=TRUE,sep=",",row.names=1,colClasses=classes)
na_profits <- is.na(csvForbes2000$profits)
table(na_profits)
csvForbes2000[is.na(csvForbes2000$profits),]
profits <- tapply(csvForbes2000$profits,  median, na.rm = TRUE)
csvForbes2000$category,
profits <- tapply(csvForbes2000$profits, csvForbes2000$category, median, na.rm = TRUE)
mprofits
profits
profits <- tapply(csvForbes2000$profits,  median, na.rm = TRUE)
z<-rnorm(100)
z
z
sample1<-sample(z,15)
sample2<-sample(z,15)
sample3<-sample(z,15)
sample4<-sample(z,15)
sample5<-sample(z,15)
sample6<-sample(z,15)
par(mfrow=c(1:6))
hist(sample1)
hist(sample1)
par(mfrow=c(1:6))
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
par(mfrow=c(1,6))
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
par(mfrow=c(1,6))
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
par(mfrow=c(1,7))
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
par(new=TRUE)
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
par(mfrow=c(1,2))
ist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
par(mfrow=c(1,3))
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
par(mfrow=c(1,4))
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
par(mfrow=c(1,5))
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
par(mfrow=c(1,6))
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
i<-c(factor(items; "Control", "Fake Ear Removal", "Ear
Removal", "Control", "Ear Removal", "Fake Ear Removal", "Ear Removal", "Fake Ear
Removal", "Ear Removal", "Control", "Fake Ear Removal"))
i<-c(factor( "Control", "Fake Ear Removal", "Ear
Removal", "Control", "Ear Removal", "Fake Ear Removal", "Ear Removal", "Fake Ear
Removal", "Ear Removal", "Control", "Fake Ear Removal"))
i<-factor(c( "Control", "Fake Ear Removal", "Ear
Removal", "Control", "Ear Removal", "Fake Ear Removal", "Ear Removal", "Fake Ear
Removal", "Ear Removal", "Control", "Fake Ear Removal"))
levels(i)
dataoriginal<-data.frame(nrow(10),ncol(3))
dataoriginal<-data.frame(nrow(10),ncol(3),colnames("Name","Age","State"))
dataoriginal<-data.frame(nrow(10),ncol(3),colnames("Name","Age","State",do.NULL = FALSE))
dataoriginal<-data.frame(nrow(10),ncol(3),colnames("Name","Age","State"))
BiocManager::install("preprocessCore")
library(preprocessCore)
library(preprocessCore)
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
ls()
con =url("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/montpick_eset.RData")
load(file=con)
close(con)
mp = montpick.eset
pdata=pData(mp)
edata=as.data.frame(exprs(mp))
fdata = fData(mp)
ls()
edata = log2(edata + 1)
edata = edata[rowMeans(edata) > 3, ]
colramp = colorRampPalette(c(3,"white",2))(20)
plot(density(edata[,1]),col=colramp[1],lwd=3,ylim=c(0,.30))
for(i in 2:20){lines(density(edata[,i]),lwd=3,col=colramp[i])}
edata = log2(edata + 1)
edata = edata[rowMeans(edata) > 3, ]
colramp = colorRampPalette(c(3,"white",2))(20)
plot(density(edata[,1]),col=colramp[1],lwd=3,ylim=c(0,.30))
for(i in 2:20){lines(density(edata[,i]),lwd=3,col=colramp[i])}
norm_edata = normalize.quantiles(as.matrix(edata))
colramp = colorRampPalette(c(3,"white",2))(20)
plot(density(norm_edata[,1]),col=colramp[1],lwd=3,ylim=c(0,.20))
for(i in 2:20){lines(density(norm_edata[,i]),lwd=3,col=colramp[i])}
View(norm_edata)
plot(density(norm_edata[,1]),lwd=3,ylim=c(0,.20))
plot(density(norm_edata[,1]),col=colramp[1],lwd=3,ylim=c(0,.20))
for(i in 2:20){lines(density(norm_edata[,i]),lwd=3)}
plot(density(norm_edata[,1]),lwd=3,ylim=c(0,.20))
for(i in 2:20){lines(density(norm_edata[,i]),lwd=3)}
plot(density(norm_edata[,1]),lwd=3,ylim=c(0,.20))
norm_edata = normalize.quantiles(as.matrix(edata))
colramp = colorRampPalette(c(3,"white",2))(20)
plot(density(norm_edata[,1]),lwd=3,ylim=c(0,.20))
for(i in 2:20){lines(density(norm_edata[,i]),lwd=3)}
norm_edata = normalize.quantiles(as.matrix(edata))
colramp = colorRampPalette(c(3,"white",2))(20)
plot(density(norm_edata[,1]),col=colramp[1],lwd=3,ylim=c(0,.20))
for(i in 2:20){lines(density(norm_edata[,i]),lwd=3,col=colramp[i])}
plot(norm_edata[1,],col=as.numeric(pdata$study))
svd1 = svd(norm_edata - rowMeans(norm_edata))
plot(svd1$v[,1],svd1$v[,2],xlab="PC1",ylab="PC2",
col=as.numeric(pdata$study))
x<-integer(4)
x
x<-as.integer(4)
x
x<-"i am"
y<-"not"
z<-"a loser"
print(x,y,z)
paste(x,y,z)
print(x)
print(x,y)
paste(x,y,z,"i am a winner")
x<-vector(1,2,3)
x
x<-vector("numeric",1,2,3)
x<-vector("numeric",1)
x
x<-vector("numeric",2)
x
x<-as.numeric(c(1,2,3,4))
x
x<-numeric(c(1,2,3,4))
x<-as.integer(4)
y<-as.integer(5)
x
y
z<-x+y
z
class(z)
x<-as.integer(2)
y<-as.integer(3)
x
y
z<-x/y
z
class(z)
x<-23
x<-as.character(x)
#0 and 1 are considered true
x,-seq(1,-10,0.1)
#0 and 1 are considered true
x,-seq(1:-10,0.1)
x<-seq(1:-10,0.1)
#0 and 1 are considered true
x<-seq(1,-10,0.1)
#0 and 1 are considered true
x<-seq(1,-10,by=0.1)
z <− seq(1 ,-10 ,by=0.1)
z <− seq(1 ,-10 ,by = 0.1)
z <− seq(100 ,50,by = 2)
z <− seq(50 ,100,by = 2)
z
#0 and 1 are considered true
x<-seq(-10,1,by=0.1)
x
#0 and 1 are considered true
x<-seq(1,10,by=0.1)
z <− seq(100 ,50,by = 2)
z <− seq(100 ,50,by = -2)
z
z<-factor(c("Control", "Control", "Control", "Ear Removal", "Ear
Removal", "Ear Removal", "Ear Removal", "Fake Ear Removal", "Fake Ear Removal", "Fake Ear Removal",
"Fake Ear Removal"))
table(z)
levels(z)
c(rep("a",25),rep("b",15),rep("c",58))
x<-c(rep("a",25),rep("b",15),rep("c",58))
table(x)
Pop <− c ( "A" ,"A" ,"A" ,"A" ,"A" ,"B" ,"B" ,"B" ,"B" )
Ht <− c(23 .4 ,32 .9 ,29 .7 ,38 .2 ,32 .7 ,28 .4 ,27 .3 ,27 .7 ,30 .1 )
Sx <− c ("Female" ,"Female" ,"Female" ,"Male" ,"Male" ,"Female" ,"Male" ,"Male" ,"Female")
Ht <− c(23, .4 ,32 .9 ,29 .7 ,38 .2 ,32 .7 ,28 .4 ,27 .3 ,27 .7 ,30 .1 )
Ht <− c(23, .4 ,32 .9 ,29 ,.7 ,38 .2 ,32 .7 ,28 .4 ,27, .3 ,27 ,.7 ,30, .1 )
Ht <− c(23, .4 ,32 .9 ,29 ,.7 ,38 ,.2 ,32 ,.7 ,28 ,.4 ,27, .3 ,27 ,.7 ,30, .1 )
Ht <− c(23, .4 ,32 ,.9 ,29 ,.7 ,38 ,.2 ,32 ,.7 ,28 ,.4 ,27, .3 ,27 ,.7 ,30, .1 )
Sx <− c ("Female" ,"Female" ,"Female" ,"Male" ,"Male" ,"Female" ,"Male" ,"Male" ,"Female")
myData <− data . frame ( Population=Pop , Height=Ht , Sex=Sx )
myData <− data.frame ( Population=Pop , Height=Ht , Sex=Sx )
data.frame(p=c(1,2,3,4,56,6),z=c("ghfdsgfd"))
cbind(myData,data.frame(Population="d"))
cbind(myData,data.frame(Population="D"))
rbind(myData,data.frame(Population="D"))
rbind(myData,data.frame(Population="D",Height=NA,Sex=NA))
rbind(myData,data.frame(Population="D",height=NA,Sex=NA))
rbind(myData,data.frame(Population="D",Height=NA,Sex=NA))
cbind(myData,data.frame(Population=Pop))
cbind(myData,list(Population=Pop , Height=Ht , Sex=Sx))
myData
myData[-1,]
names(myData)
names(myData,c(("Group" ,"DistanceFromGround" ,"Gender"))
names(myData)<-c(("Group" ,"DistanceFromGround" ,"Gender"))
names(myData)<-c("Group" ,"DistanceFromGround" ,"Gender")
myData
subset(myData,"Group")
subset(myData,select="Group")
x<-logical(4)
y<-as.numeric(1,2,3,4,5,6,7)
y
y[1]
y[2]
y<-numeric(1,2,3,4,5,6,7)
y<-as.numeric(1,2,3,4,5,6,7)
y<-as.numeric(1,2,3,4,5,6,7)
y<-as.numeric(1:7)
y[2]
z<-c(LETTERS[1:5])
x<-logical(7)
x<-logical(7)
x<-logical(7)
y<-as.numeric(1:7)
z<-c(LETTERS[1:7])
data<-data.frame(x=x,y=y,z=z)
data
is.na(data)
table(is.na(data))
data[is.na(data)==TRUE]
v<-as.numeric(1:7)
cbind(data,v)
v<-numeric(1:7)
v<-as.numeric(1:7)
data<-cbind(data,v)
write.table(data,"mydata.csv")
c<-read.table("mydata.csv")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
c
c<-read.table("mydata.csv",sep="",")
Order<- −1:4
c<-read.table("mydata.csv",sep="",")
Order<- −1:4
Order
c<-read.table("mydata.csv",sep=",")
Order<- −1:4
Order
x<-1:10
y<-c(19 ,25 ,14 ,15 ,24 ,17 ,19 ,27 ,29 ,25)
plot(x,y)
abline(x,y)
z<-lm(y~x)
abline(z)
plot(x,y,xlim=range(x),ylim=range(y))
z<-lm(y~x)
abline(z)
plot(x,y,xlim=range(x),ylim=range(y))
range(y)
plot(x,y,xlim=range(x),ylim=range(y))
plot(x,y,xlim=range(x),ylim=f))
z<-rnorm(100)
den<-density(z)
plot(den,xlim=range(c(den$x),ylim=range(c(den$y))
par(new=T)
hist(z)
sample1<-sample(z,15)
sample2<-sample(z,15)
sample3<-sample(z,15)
sample4<-sample(z,15)
sample5<-sample(z,15)
sample6<-sample(z,15)
plot(den,xlim=range(c(den$x),ylim=range(c(den$y)))
par(new=T)
hist(z)
sample1<-sample(z,15)
sample2<-sample(z,15)
sample3<-sample(z,15)
sample4<-sample(z,15)
sample5<-sample(z,15)
sample6<-sample(z,15)
par(mfrow=c(3,2))
hist(sample1)
hist(sample2)
hist(sample3)
hist(sample4)
hist(sample5)
hist(sample6)
i<-factor(c( "Control", "Fake Ear Removal", "Ear
Removal", "Control", "Ear Removal", "Fake Ear Removal", "Ear Removal", "Fake Ear
Removal", "Ear Removal", "Control", "Fake Ear Removal"))
library('Rcpi')
library('Rcpi')
library('Rcpi')
library('Rcpi')
Sys.setenv(JAVA_HOME = "C:\Users\ahmed hatem\Downloads\jre-8u281-windows-x64")
Sys.setenv(JAVA_HOME = "C:\\Users\\ahmed hatem\\Downloads\\jre-8u281-windows-x64")
library('Rcpi')
library('rcpi')
library('Rcpi')
library('Rcpi')
x = readFASTA(system.file('protseq/P00750.fasta', package = 'Rcpi'))[[1]]
dbpath = tempfile('tempdb', fileext = '.fasta')
invisible(file.copy(from = system.file('protseq/Plasminogen.fasta', package = 'Rcpi'), to = dbpath))
pssmmat = extractProtPSSM(seq = x, database.path = dbpath)
dim(pssmmat)  # 20 x 562 (P00750: length 562, 20 Amino Acids)
setwd("~/")
data_files <- list.files("E:\undersampled data")  # Identify file names
data_files
data_files <- list.files("E:/undersampled data")  # Identify file names
data_files
data_files <- list.files("E:/undersampled data")  # Identify file names
data_files
for(i in 1:length(data_files)) {
print(data_files[i])
print(data_files[i])}
data_files <- list.files("E:/undersampled data")  # Identify file names
data_files
for(i in 1:length(data_files)) {
print(data_files[i])}
x <- data.frame(data_files[i])}
data_files <- list.files("E:/undersampled data")  # Identify file names
data_files
for(i in 1:length(data_files)) {
x <- data.frame(data_files[i])
as.data.frame(lapply(x, as.numeric))
}
data_files <- list.files("E:/undersampled data")  # Identify file names
data_files
for(i in 1:length(data_files)) {
x <- data.frame(data_files[i])
as.data.frame(lapply(x, as.numeric))
x}
View(x)
load("~/.RData")
load("~/.RData")
data_files <- list.files("C:/Users/ahmed hatem/Downloads/GP/undersampled data0.9")  # Identify file names
data_files
library(readr)
library(dplyr)
for(i in 1:length(data_files)) {
setwd("C:/Users/ahmed hatem/Downloads/GP/undersampled data0.9")
dataset <- read_csv(data_files[i])
data_files[i]
dataset %>% mutate_if(is.character,as.double)
cols.num <- names(dataset)
dataset[cols.num] <- sapply(dataset[cols.num],as.double)
setwd("C:/Users/ahmed hatem/Downloads/GP/ready for models0.9")
write.csv(dataset, data_files[i], row.names = FALSE)
str(dataset)}
